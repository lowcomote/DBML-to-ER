/*
 * generated by Xtext 2.26.0
 */
package at.jku.se.dbml.ide.contentassist.antlr;

import at.jku.se.dbml.ide.contentassist.antlr.internal.InternalDBMLParser;
import at.jku.se.dbml.services.DBMLGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DBMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DBMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DBMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getIndexAccess().getAlternatives_0(), "rule__Index__Alternatives_0");
			builder.put(grammarAccess.getIndexAccess().getAlternatives_3(), "rule__Index__Alternatives_3");
			builder.put(grammarAccess.getOptionalAccess().getAlternatives(), "rule__Optional__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
			builder.put(grammarAccess.getTableAccess().getGroup_6(), "rule__Table__Group_6__0");
			builder.put(grammarAccess.getIndexAccess().getGroup(), "rule__Index__Group__0");
			builder.put(grammarAccess.getIndexAccess().getGroup_0_1(), "rule__Index__Group_0_1__0");
			builder.put(grammarAccess.getIndexAccess().getGroup_0_1_2(), "rule__Index__Group_0_1_2__0");
			builder.put(grammarAccess.getIndexAccess().getGroup_3_1(), "rule__Index__Group_3_1__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_4(), "rule__Attribute__Group_4__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_4_2(), "rule__Attribute__Group_4_2__0");
			builder.put(grammarAccess.getOptionalAccess().getGroup_1(), "rule__Optional__Group_1__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_5(), "rule__Type__Group_5__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_5_1(), "rule__Type__Group_5_1__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_14(), "rule__Type__Group_14__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_14_1(), "rule__Type__Group_14_1__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_15(), "rule__Type__Group_15__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_16(), "rule__Type__Group_16__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_17(), "rule__Type__Group_17__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_18(), "rule__Type__Group_18__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_19(), "rule__Type__Group_19__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_20(), "rule__Type__Group_20__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_20_1(), "rule__Type__Group_20_1__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_21(), "rule__Type__Group_21__0");
			builder.put(grammarAccess.getRefAccess().getGroup(), "rule__Ref__Group__0");
			builder.put(grammarAccess.getRefAccess().getGroup_2(), "rule__Ref__Group_2__0");
			builder.put(grammarAccess.getNestedRefAccess().getGroup(), "rule__NestedRef__Group__0");
			builder.put(grammarAccess.getModelAccess().getStatementsAssignment(), "rule__Model__StatementsAssignment");
			builder.put(grammarAccess.getTableAccess().getNameAssignment_2(), "rule__Table__NameAssignment_2");
			builder.put(grammarAccess.getTableAccess().getAttributesAssignment_5(), "rule__Table__AttributesAssignment_5");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_1(), "rule__Attribute__NameAssignment_1");
			builder.put(grammarAccess.getAttributeAccess().getTypeAssignment_3(), "rule__Attribute__TypeAssignment_3");
			builder.put(grammarAccess.getAttributeAccess().getOptionsAssignment_4_1(), "rule__Attribute__OptionsAssignment_4_1");
			builder.put(grammarAccess.getAttributeAccess().getOptionsAssignment_4_2_1(), "rule__Attribute__OptionsAssignment_4_2_1");
			builder.put(grammarAccess.getRefAccess().getLeftAssignment_3(), "rule__Ref__LeftAssignment_3");
			builder.put(grammarAccess.getRefAccess().getRightAssignment_5(), "rule__Ref__RightAssignment_5");
			builder.put(grammarAccess.getNestedRefAccess().getTableAssignment_1(), "rule__NestedRef__TableAssignment_1");
			builder.put(grammarAccess.getNestedRefAccess().getAttrAssignment_5(), "rule__NestedRef__AttrAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DBMLGrammarAccess grammarAccess;

	@Override
	protected InternalDBMLParser createParser() {
		InternalDBMLParser result = new InternalDBMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DBMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DBMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
