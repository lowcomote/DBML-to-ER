/*
 * generated by Xtext 2.26.0
 */
package at.jku.se.dbml.serializer;

import at.jku.se.dbml.dBML.Attribute;
import at.jku.se.dbml.dBML.DBMLPackage;
import at.jku.se.dbml.dBML.Model;
import at.jku.se.dbml.dBML.NestedRef;
import at.jku.se.dbml.dBML.Ref;
import at.jku.se.dbml.dBML.Table;
import at.jku.se.dbml.services.DBMLGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DBMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DBMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DBMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DBMLPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case DBMLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case DBMLPackage.NESTED_REF:
				sequence_NestedRef(context, (NestedRef) semanticObject); 
				return; 
			case DBMLPackage.REF:
				sequence_Ref(context, (Ref) semanticObject); 
				return; 
			case DBMLPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=ID type=Type (options+=Optional options+=Optional*)?)
	 * </pre>
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     statements+=Statement+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NestedRef returns NestedRef
	 *
	 * Constraint:
	 *     (table=[Table|ID] attr=ID)
	 * </pre>
	 */
	protected void sequence_NestedRef(ISerializationContext context, NestedRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DBMLPackage.Literals.NESTED_REF__TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DBMLPackage.Literals.NESTED_REF__TABLE));
			if (transientValues.isValueTransient(semanticObject, DBMLPackage.Literals.NESTED_REF__ATTR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DBMLPackage.Literals.NESTED_REF__ATTR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNestedRefAccess().getTableTableIDTerminalRuleCall_1_0_1(), semanticObject.eGet(DBMLPackage.Literals.NESTED_REF__TABLE, false));
		feeder.accept(grammarAccess.getNestedRefAccess().getAttrIDTerminalRuleCall_5_0(), semanticObject.getAttr());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns Ref
	 *     Ref returns Ref
	 *
	 * Constraint:
	 *     (left=NestedRef right=NestedRef)
	 * </pre>
	 */
	protected void sequence_Ref(ISerializationContext context, Ref semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DBMLPackage.Literals.REF__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DBMLPackage.Literals.REF__LEFT));
			if (transientValues.isValueTransient(semanticObject, DBMLPackage.Literals.REF__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DBMLPackage.Literals.REF__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefAccess().getLeftNestedRefParserRuleCall_3_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getRefAccess().getRightNestedRefParserRuleCall_5_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns Table
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (name=ID attributes+=Attribute*)
	 * </pre>
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
