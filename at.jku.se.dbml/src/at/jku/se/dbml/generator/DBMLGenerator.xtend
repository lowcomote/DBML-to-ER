/*
 * generated by Xtext 2.26.0
 */
package at.jku.se.dbml.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import at.jku.se.dbml.dBML.Model
import org.eclipse.emf.common.util.URI
import org.eclipse.core.resources.IFile
import org.eclipse.core.runtime.Path
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.resources.IFile
import org.eclipse.core.runtime.NullProgressMonitor
import org.module.eer.mm.moduleeer.AttributeType

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DBMLGenerator extends AbstractGenerator {
	
	public static val myMap = newLinkedHashMap(
	'INT' -> AttributeType.INTEGER,
	'TINYINT' -> AttributeType.INTEGER,
	'BIGINT' -> AttributeType.INTEGER,
	'TIMESTAMP' -> AttributeType.DATE,
	'DATE' -> AttributeType.DATE,
	'DATETIME' -> AttributeType.DATE,
	'TEXT' -> AttributeType.STRING,
	'LONGTEXT' -> AttributeType.STRING,
	'MEDIUMTEXT' -> AttributeType.STRING,
	'CHAR' -> AttributeType.STRING,
	'VARCHAR' -> AttributeType.STRING,
	'DECIMAL' -> AttributeType.INTEGER
	 )

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var URI resourceURI = fsa.getURI('/').trimSegments(1).appendSegment('model')
					.appendSegment(resource.URI.trimFileExtension.lastSegment + '.moduleeer');
		for (e : resource.allContents.toIterable.filter(Model)) {
                DBML2ER.transform(e, resourceURI);
		}
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	}
	
	def removeFilesIfExist(URI uri) {
		val IFile file = ResourcesPlugin.workspace.root.getFile(new Path(uri.toPlatformString(true)));
		file.delete(true, new NullProgressMonitor);
	}
}
